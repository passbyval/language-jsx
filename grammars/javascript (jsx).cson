fileTypes: []
injectionSelector: "L:source.js"
name: "Javascript (JSX)"
scopeName: "val.jsx"
patterns: [
  {
    # Match JSX expressions: {myVar}
    match: "(?:{)(\\w+)(?:})"
    captures:
      "1":
        name: "variable.val.jsx"
  }
  {
    # Match JSX variable attributes: <Component onClick={this.onClick} />
    match: "(?:([\\w*\\$*\\-]*)(=)({)(this)?(\\.?)([\\s\\w\\'\",:]*)(}))|(?:([\\w$]+)(=)({)([\\w\\s]+)(===?)(?:\\s+)(?:\\w+\\.?)+(}))"
    captures:
      "1":
        name: "entity.other.attribute-name.val.jsx"
      "2":
        name: "keyword.operator.assignment.val.jsx"
      "3":
        name: "punctuation.section.embedded.begin.val.jsx"
      "4":
        name: "variable.language.this.val.jsx"
      "5":
        name: "punctuation.accessor.val.jsx"
      "6":
        name: "variable.other.property.val.jsx"
      "7":
        name: "punctuation.section.embedded.end.val.jsx"
      "8":
        name: "entity.other.attribute-name.val.jsx"
      "9":
        name: "keyword.operator.assignment.val.jsx"
      "10":
        name: "punctuation.section.embedded.begin.val.jsx"
      "12":
        name: "keyword.operator.comparison.val.jsx"
      "13":
        name: "punctuation.section.embedded.end.val.jsx"
  }
  {
    # Match JSX expressions with operators: {myVar && yourVar} | {myVar || yourVar}
    match: "(?:\\s*)({)(?:(?:!?)(this)\\.?)([a-zA-Z0-9]+)\\s(&&|\\|\\|)"
    captures:
      "1":
        name: "meta.brace.curly.val.jsx"
      "2":
        name: "variable.language.this.val.jsx"
      "3":
        name: "meta.operator.logical.val.jsx"
      "4":
        name: "meta.operator.logical.val.jsx"
  }
  {
    # Match decorators without function parens: @decorator
    match: "^(?:\\s*)(@)(\\w+)"
    captures:
      "0":
        name: "meta.decorator.val.jsx"
      "1":
        name: "punctuation.decorator.val.jsx"
      "2":
        name: "entity.name.function.val.jsx"
  }
  {
    # Match React components: <Component />
    match: "(<\/?)([A-Z][\\w]*)(?:\\.?)(\\w*)"
    captures:
      "1":
        name: "punctuation.definition.tag.begin.val.jsx"
      "2":
        name: "support.class.component.val.jsx"
      "3":
        name: "support.class.component.val.jsx"
  }
  {
    # Match class names: SomeClass
    match: "(?<!\\w|\\/|\\'|\")([A-Z][a-z]+(?:[A-Z][a-z]+)+)"
    captures:
      "1":
        name: "entity.name.type.class.val.jsx"
  }
  {
    # Match single word classes
    match: "(import)(?:\\s+)([A-Z]+[a-z]*)(?:\\s+)(from)(?:\\s+)(\"|\\')([\\w\.\\/]+)(\"|\\')"
    captures:
      "0":
        name: "meta.import"
      "1":
        name: "keyword.control.import"
      "2":
        name: "entity.name.type.class"
      "3":
        name: "keyword.control.from"
      "4":
        name: "punctuation.definition.string.begin"
      "5":
        name: "string.quoted"
      "6":
        name: "punctuation.definition.string.end"
  }
  {
    # Match destructured class names
    begin: "(?:(import)|(const)|(let)|(var))(?:\\s+)({)"
    beginCaptures:
      "1":
        name: "keyword.control.import"
      "2":
        name: "storage.type"
      "3":
        name: "storage.type"
      "4":
        name: "storage.type"
      "5":
        name: "punctuation.definition.block"
    end: "(})"
    endCaptures:
      "1":
        name: "punctuation.definition.block"
    patterns: [
      {
        match: "(?:(?:\\s*)(?<!\\/)(\\b[A-Z][a-z][A-Za-z]*))"
        captures:
          "1":
            name: "entity.name.type.class"
      }
    ]
  }
  {
    # Capture class names within template strings and parens: ${Class}
    match: "(?:(?:\\$)(?:{)([A-Z][a-z]+(?:[A-Z][a-z]+)+)(?:}))|(?:(?:\\()((?:[A-Z][a-z]+)+)(?:\\)))"
    captures:
      "1":
        name: "entity.name.type.class.val.jsx"
      "2":
        name: "entity.name.type.class.val.jsx"
  }
  {
    # Match single quote string attributes: <Component value='hello' />
    match: "(\\w*)(=)(\\')([\\w-]*)(\\')"
    captures:
      "1":
        name: "entity.other.attribute-name.jsx.val.jsx"
      "2":
        name: "keyword.operator.assignment.val.jsx"
      "3":
        name: "punctuation.definition.string.begin.val.jsx"
      "4":
        name: "string.quoted.single.val.jsx"
      "5":
        name: "punctuation.definition.string.end.val.jsx"
  }
  {
    # Match double quote string attributes: <Component value="hello" />
    match: "(\\w*)(=)(\")([\\w-]*)(\")"
    captures:
      "1":
        name: "entity.other.attribute-name.val.jsx"
      "2":
        name: "keyword.operator.assignment.val.jsx"
      "3":
        name: "punctuation.definition.string.begin.val.jsx"
      "4":
        name: "string.quoted.single.val.jsx"
      "5":
        name: "punctuation.definition.string.end.val.jsx"
  }
  # {
  #   # Match rest of attributes, including objects: <Component style={{}} />
  #   match: "(?:\\s*)([\\w\\$*\\-]+)(?:=)(?:{)(?:{?)"
  #   captures:
  #     "1":
  #       name: "entity.other.attribute-name.val.jsx"
  # }
  {
    # Match standard HTML element: <div />, <span />, etc
    match: "(<\/?)([a-z]+)([\\s>]+)"
    captures:
      "1":
        name: "punctuation.definition.tag.begin.val.jsx"
      "2":
        name: "entity.name.tag.val.jsx"
  }
  {
    # Capture rogue closing brackets
    match: "(?:\\s+)(>)(?:\\s*)"
    captures:
      "1":
        name: "punctuation.definition.tag.end.val.jsx"
  }
  {
    # Match strings inside JSX attribute object: <Component style={{ color: 'red' }} />
    match: "(?:\\s*)(\\w+)(:)(?:\\s*)(\\')(\\w*)(\\')"
    captures:
      "1":
        name: "meta.object-literal.key.val.jsx"
      "2":
        name: "punctuation.separator.key-value.val.jsx"
      "3":
        name: "punctuation.definition.string.begin.val.jsx"
      "4":
        name: "single.quoted.string.val.jsx"
      "5":
        name: "punctuation.definition.string.end.val.jsx"
  }
  {
    # Match .this
    match: "(?:!?)(this)(\\.)(?:(\\w*[\\s}]$)?)"
    captures:
      "1":
        name: "variable.language.this.val.jsx"
      "2":
        name: "punctuation.accessor.val.jsx"
      "3":
        name: "variable.other.property.val.jsx"
  }
  {
    # Match !important
    match: "(!important)"
    captures:
      "1":
        name: "keyword.important"
  }
]
